"""
This type stub file was generated by pyright.
"""

class BoundaryHandler:
    """Detect and handle boundaries in a string.

    The BoundaryHandler is an interface for a CaseConverter instance. It provides
    methods for detecting a boundary in a string as well as how to handle
    the boundary.
    """
    def is_boundary(self, pc, c):
        """Determine if we're on a boundary.

        :param pc: Previous character
        :param cc: Current character
        :return: True if a boundary is found, else false.
        :rtype: boolean
        """
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer):
        """Handle a detected boundary.

        :param pc: Previous character
        :type pc: str
        :param cc: Current character
        :type cc: str
        :param input_buffer: The raw string wrapped in a buffer.
        :type input_buffer: StringBuffer
        :param output_buffer: The output buffer that stores the new string as
            it's constructed.
        :type output_buffer: StringBuffer
        """
        ...
    


class OnDelimeterUppercaseNext(BoundaryHandler):
    def __init__(self, delimiters, join_char=...) -> None:
        ...
    
    def is_boundary(self, pc, c): # -> bool:
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer): # -> None:
        ...
    


class OnDelimeterLowercaseNext(BoundaryHandler):
    def __init__(self, delimiters, join_char=...) -> None:
        ...
    
    def is_boundary(self, pc, c): # -> bool:
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer): # -> None:
        ...
    


class OnUpperPrecededByLowerAppendUpper(BoundaryHandler):
    def __init__(self, join_char=...) -> None:
        ...
    
    def is_boundary(self, pc, c):
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer): # -> None:
        ...
    


class OnUpperPrecededByLowerAppendLower(BoundaryHandler):
    def __init__(self, join_char=...) -> None:
        ...
    
    def is_boundary(self, pc, c):
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer): # -> None:
        ...
    


class OnUpperPrecededByUpperAppendJoin(BoundaryHandler):
    def __init__(self, join_char=...) -> None:
        ...
    
    def is_boundary(self, pc, c):
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer): # -> None:
        ...
    


class OnUpperPrecededByUpperAppendCurrent(BoundaryHandler):
    def __init__(self, join_char=...) -> None:
        ...
    
    def is_boundary(self, pc, c):
        ...
    
    def handle(self, pc, cc, input_buffer, output_buffer): # -> None:
        ...
    


